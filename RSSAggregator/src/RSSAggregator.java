import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Aryahi Nittur
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * below is implemented in the item process method
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String oLink = "<a href=\"";
        String iLink = "\">";
        String cLink = "</a>";

        int titleIndex = getChildElement(channel, "title");
        int linkIndex = getChildElement(channel, "link");
        XMLTree title = channel.child(titleIndex);

        if (title.numberOfChildren() == 0) {

            out.println("<html> <head> <title>Empty Title</title>");
            out.println("</head> <body>");

        } else {
            out.println("<html> <head> <title>" + title.child(0).label() + "</title>");
            out.println("</head> <body>");
        }
        XMLTree link = channel.child(linkIndex);
        out.println("<h1>" + oLink + link.child(0).label() + iLink
                + title.child(0).label() + cLink + "</h1>");

        int descriptionIndex = getChildElement(channel, "description");

        if (descriptionIndex == -1) {

            out.println("<p>No Description</p>");

        } else {
            XMLTree description = channel.child(descriptionIndex);
            if (description.numberOfChildren() == 0) {
                out.println("<p>No Description</p>");
            }
            out.println("<p>" + description.child(0).label() + "</p>");
        }

        //item table

        out.println("<table border=\"1\">");
        out.println("<tr>");

        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");

        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("</table>");
        out.println("</body> </html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int occurance = -1;
        int count = 0;
        while (count < xml.numberOfChildren()) {
            if (xml.child(count).isTag() && xml.child(count).label().equals(tag)) { //â˜†
                occurance = count;
                count = xml.numberOfChildren();
            }
            count++;
        }

        return occurance;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        String oLink = "<a href=\"";
        String iLink = "\">";
        String cLink = "</a>";

        //assigning content if exists, otherwise says its not available

        String pubDate = "No date available";

        if (getChildElement(item, "pubDate") != -1) {
            pubDate = item.child(getChildElement(item, "pubDate")).child(0).label();
        }

        out.println("<td>" + pubDate + "</td>");

        String sourceContent = "No source available";

        int sourceIndex = getChildElement(item, "source");

        if (sourceIndex != -1) {
            XMLTree source = item.child(sourceIndex);
            if (source.numberOfChildren() != 0) {
                sourceContent = source.child(0).label();
            }

            if (source.hasAttribute("url")) {
                out.println("<td>" + oLink + source.attributeValue("url") + iLink
                        + sourceContent + cLink + "</td>");
            } else {
                out.println("<td>" + sourceContent + "</td>");
            }
        } else {
            out.println("<td>" + sourceContent + "</td>");
        }

        String titleOfNews = "none found";

        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        int linkContentIndex = getChildElement(item, "link");

        //Title and Description tags
        if (titleIndex != -1) {
            XMLTree title = item.child(titleIndex);
            if (title.numberOfChildren() != 0) {
                titleOfNews = title.child(0).label();
            }
        }
        if (descriptionIndex != -1) {
            XMLTree description = item.child(descriptionIndex);
            if (description.numberOfChildren() != 0) {
                titleOfNews = description.child(0).label();
            }
        }

        // Checks for link content
        if (linkContentIndex != -1) {
            XMLTree linkContent = item.child(linkContentIndex);
            out.println("<td>" + oLink + linkContent.child(0).label() + iLink
                    + titleOfNews + cLink + "</td>");
        } else {
            out.println("<td>" + titleOfNews + "</td>");
        }

        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param fileName
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String fileName, SimpleWriter out) {
        String rss = url;
        String fileHTMLname = fileName;

        XMLTree item = new XMLTree1(rss);
        SimpleWriter file = new SimpleWriter1L(fileHTMLname);

        if (item.hasAttribute("version") && item.attributeValue("version").equals("2.0")
                && item.label().equals("rss")) {
            outputHeader(item.child(0), file);
            for (int i = 0; i < item.child(0).numberOfChildren(); i++) {
                if (item.child(0).child(i).label().equals("item")) {
                    processItem(item.child(0).child(i), file);
                }
            }
            outputFooter(file);

        } else {
            out.println("failed to process because file is not rss 2.0");
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Enter your rss link: ");
        String link = in.nextLine();
        XMLTree feeds = new XMLTree1(link);

        out.println("Enter your rss page name: ");
        SimpleWriter homepage = new SimpleWriter1L(in.nextLine());

        homepage.println(
                "<html> <head> <title>" + feeds.attributeValue("title") + "</title>");
        homepage.println("</head> <body>");
        homepage.println("<h1>" + feeds.attributeValue("title") + "</h1>");
        homepage.println("<ul>");
        for (int i = 0; i < feeds.numberOfChildren(); i++) {
            homepage.print("<li> <a href=\"" + feeds.child(i).attributeValue("file")
                    + "\">" + feeds.child(i).attributeValue("name") + "</a></li>");
            processFeed(feeds.child(i).attributeValue("url"),
                    feeds.child(i).attributeValue("file"), out);
        }
        homepage.println("</ul>");
        homepage.println("</body> </html>");

        in.close();
        out.close();
        homepage.close();
    }

}
